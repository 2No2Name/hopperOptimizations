plugins {
	id 'fabric-loom' version '0.6-SNAPSHOT'
}

repositories {
	allprojects {
		repositories {
			maven { url 'https://jitpack.io' }
		}
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.minecraft_version+'-'+project.mod_version

minecraft {
	accessWidener = file("src/main/resources/hopperOptimizations.accesswidener")
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
	modCompile "com.github.2No2Name:lithium-fabric:${project.hopperoptimizations_lithium_release}"
	runtime('net.fabricmc:sponge-mixin:0.8+build.18') { //fix NoSuchMethodError https://github.com/jellysquid3/lithium-fabric/issues/121
		force = true
	}
	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	// javax.annotation.Nullable/Nonnull
	compileOnly "com.google.code.findbugs:jsr305:3.0.1"
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

